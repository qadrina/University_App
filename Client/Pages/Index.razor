@page "/"
@using System.Net.Http
@inject HttpClient httpClient
@inject NavigationManager nav
@using University_App.Shared.Models
@using University_App.Shared.StoredProcedures

<PageTitle>Index</PageTitle>

<div class="centre">
    <img src="gokam.png" style="max-width:100px;" />
    <h1 >Golden University</h1>
    <h5 >Welcome to Golden University!</h5>
</div>

<br />

@if (Faculties != null)
{
    <table class="table table-bordered table-striped table-hover table-responsive-md" style="width:70%; margin:auto">
        <thead>
            <tr>
                <th>Faculty ID</th>
                <th>Faculty Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var fac in Faculties)
            {
                <tr @onclick="@((e) => Select_Faculty(e, fac))">
                    <td>@fac.Faculty_Id</td>
                    <td>@fac.Faculty_Title</td>
                </tr>
            }
        </tbody>
    </table>
    <br />

    @*@if (this.Faculty_Id != null) // !String.IsNullOrEmpty(Faculty_Id)*@
    @if (!String.IsNullOrEmpty(this.faculty.Faculty_Title)) // !String.IsNullOrEmpty(Faculty_Id)
    {
        if (Students != null)
        {
            <h3 class="centre">@faculty.Faculty_Title</h3>
            <h4 class="centre">@faculty.Faculty_Id</h4>
            <table class="table table-bordered table-responsive table-striped table-hover" style="width:70%; margin:auto">
                <thead>
                    <tr>
                        <th>Faculty ID</th>
                        <th>Photo</th>
                        <th>Student ID</th>
                        <th>Student Name</th>
                        <th>Class Year</th> <!--FLAG, PHOTO, ENROLLMENT YEAR, LINQ VERSION -->
                        <th>Nationality</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var stdn in Students)
                    {
                        <tr @onclick="@((e) => Select_Student(e, stdn))">
                            <td>@stdn.Faculty_Id</td>
                            <td>Photo</td>
                            <td>@stdn.Student_Id</td>
                            <td>@stdn.Student_Name</td>
                            <td>@stdn.Class_Year</td>
                            <td>@stdn.Nationality</td>
                        </tr>
                    }
                </tbody>
            </table>
            
        }
    }
    <br />

    @if (!String.IsNullOrEmpty(this.faculty.Faculty_Title))
   {
        @if (this.Student_Id != null) //!String.IsNullOrEmpty(this.student.Student_Id
        {
            if (spStudent_Courses != null)
            {
                <h3 class="centre">@student.Student_Name</h3>
                <h4 class="centre">@student.Student_Id</h4>
                <table class="table table-bordered table-responsive table-striped table-hover" style="width:70%; margin:auto">
                    <thead>
                        <tr>
                            <th>Student ID</th>
                            <th>Student Name</th>
                            <th>Course ID</th>
                            <th>Course Title</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var s_course in spStudent_Courses)
                        {
                            <tr>
                                <td>@s_course.Student_Id</td>
                                <td>@s_course.Student_Name</td>
                                <td>@s_course.Course_Id</td>
                                <td>@s_course.Course_Title</td>
                            </tr>
                        }

                    </tbody>
                </table>
            }
        }
    }
   <br />
}


@code {
    #pragma warning disable CS8618 // Possible null reference argument.
#pragma warning disable CS8601 // Possible null reference argument.
#pragma warning disable CS8602 // Possible null reference argument.

    List<Faculty> Faculties { get; set; } = new List<Faculty>();
    List<Course> Courses { get; set; }
    List<Student> Students { get; set; }
    List<spStudent_Course> spStudent_Courses { get; set; }
    Faculty faculty { get; set; } = new Faculty();
    Student student { get; set; } = new Student();
    spStudent_Course _spStudent_Course { get; set; }
    string? Faculty_Id { get; set; }
    string? Student_Id { get; set; }

    #region Select Tables
    async Task Select_Faculty(MouseEventArgs e, Faculty fac)
    {
        this.Faculty_Id = fac.Faculty_Id;
        this.faculty = fac;
        Console.WriteLine("⭕ this.Faculty_Id: {0}", this.Faculty_Id);

        if (!String.IsNullOrEmpty(Faculty_Id))
        {
            Students = await httpClient.GetFromJsonAsync<List<Student>>($"api/University/Students/{Faculty_Id}");
            Student_Id = null;
            spStudent_Courses = new List<spStudent_Course>();
        }
        await Task.CompletedTask;
    }

    async Task Select_Student(MouseEventArgs e, Student stdn) 
    {
        this.Student_Id = stdn.Student_Id;
        this.student = stdn;
        Console.WriteLine("this.Student_Id: {0}", this.Student_Id);

        if (!String.IsNullOrEmpty(Student_Id))
        {
            spStudent_Courses = await httpClient.GetFromJsonAsync<List<spStudent_Course>>($"api/University/spStudent_Courses/{Student_Id}");
        }
        await Task.CompletedTask;
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        Faculties = await httpClient.GetFromJsonAsync<List<Faculty>>($"api/University/Faculties");
        Students = await httpClient.GetFromJsonAsync<List<Student>>($"api/University/Students/{"*"}");
        spStudent_Courses = await httpClient.GetFromJsonAsync<List<spStudent_Course>>($"api/University/spStudent_Courses/{"*"}");
        await base.OnInitializedAsync();
    }
}
